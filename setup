#!/usr/bin/python3
import os
import socket
import subprocess
import sys
from typing import List

yes = "-y" in sys.argv


def mkdir(path: str):
    try:
        os.mkdir(os.path.expanduser(path))
    except FileExistsError:
        pass


def install_packages(packages: List[str]) -> None:
    AUR_HELPER = "pikaur"
    if "--pkg" in sys.argv or "--packages" in sys.argv:
        subprocess.run([AUR_HELPER, "-S", ] + packages)


def coc_plugins() -> None:
    def split_list(ls, n):
        for i in range(0, len(ls), n):
            yield ls[i:i + n]

    pluglist = [
        "coc-clangd",
        "coc-cord",
        "coc-css",
        "coc-dictionary",
        "coc-emoji",
        "coc-git",
        "coc-java",
        "coc-json",
        "coc-lists",
        "coc-marketplace",
        "coc-markdownlint",
        "coc-pairs",
        "coc-python",
        "coc-rust-analyzer",
        "coc-sh",
        "coc-snippets",
        "coc-tag",
        "coc-tsserver",
        "coc-ultisnips",
        "coc-vimtex",
        "coc-word",
        "coc-yaml",
        "coc-yank",
        "coc-diagnostic"]
    for plugs in split_list(pluglist, 10):
        subprocess.run(["nvim", "+CocInstall " + " ".join(plugs)])


def link(relative_name: str, filepath: str, sudo: bool = False) -> None:
    if not os.path.exists(os.getcwd() + relative_name):
        raise FileNotFoundError("Local filepath does not exist")

    filepath = os.path.expanduser(filepath)
    mkdir(filepath if os.path.isdir(filepath) else os.path.dirname(filepath))
    if sudo:
        subprocess.run(["sudo", "rm", "-rf", filepath])
        subprocess.run(["sudo", "ln", "-s", os.getcwd() + relative_name, filepath])
    else:
        subprocess.run(["rm", "-rf", filepath])
        subprocess.run(["ln", "-s", os.getcwd() + relative_name, filepath])


def should(message: str) -> bool:
    return yes or ("n" not in input(f"{message} (Y/n) ").lower())


if should("Install alacritty config"):
    hostname = socket.gethostname()
    if hostname == "chronos":
        link("/alacritty_chronos.yml", "~/.config/alacritty/alacritty.yml")
        print(f"Installed alacritty_{hostname}.yml")
    elif hostname == "hyperion":
        link("/alacritty_hyperion.yml", "~/.config/alacritty/alacritty.yml")
        print(f"Installed alacritty_{hostname}.yml")
    else:
        print(f"Alacritty_{hostname}.yml does not exist")

if should("Install archlinx specific configs?"):
    link("/makepkg.conf", "/etc/makepkg.conf", sudo=True)
    print("Installed makepkg.conf")
    link("/makepkg.conf.gcc", "/etc/makepkg.conf.gcc", sudo=True)
    print("Installed makepkg.conf.gcc")

if should("Install bpytop config?"):
    install_packages(["bpytop"])
    link("/bpytop.conf", "~/.config/bpytop/bpytop.conf")
    print("Installed bpytop.conf")

if should("Install firefox configs"):
    install_packages(["firefox-tridactyl-native", "firefox"])
    link("/tridactylrc", "~/.config/tridactyl/tridactylrc")
    print("Installed tridactylrc")

if should("Install Git configs"):
    link("/gitignore", "~/.config/git/ignore")
    link("/gitignore", "~/.gitignore")
    print("Installed global gitignore")

if should("Install i3 configs?"):
    install_packages(["i3-gaps", "polybar", "rofi", "picom", "feh", "dunst"])
    link("/i3", "~/.config/i3")
    print("Installed i3 configs")
    link("/i3/polybar", "~/.config/polybar")
    print("Installed polybar configs")
    link("/i3/picom.conf", "~/.config/picom.conf")
    print("Installed picom.conf")
    link("/i3/dunst", "~/.config/dunst")
    print("installed dunst configs")

if should("Install mpd configs?"):
    link("/mpd/mpd.conf", "~/.config/mpd/mpd.conf")
    print("Installed mpd.conf")
    link("/mpd/mpDris2.conf", "~/.config/mpDris2/mpDris2.conf")
    print("Installed mpDris2.conf")
    link("/mpd/ncmpcpp", "~/.ncmpcpp")
    print("Installed ncmpcpp configs")

if should("Install neofetch config?"):
    mkdir("~/.config/neofetch")
    link("/neofetch.conf", "~/.config/neofetch/config.conf")
    print("Installed neofetch.conf")

if should("Install nushell config?"):
    mkdir("~/.config/nu")
    link("/nushell.toml", "~/.config/nu/config.toml")
    print("Installed nushell.toml")

if should("Install nvim configs?"):
    install_packages(["neovim-nightly", "vim-plug", "neovim-symlinks", "nodejs", "texlive-bin", "latex-mk", "ccls"])
    try:
        os.mkdir(os.path.expanduser("~/.config/nvim"))
    except OSError:
        pass
    link("/init.vim", "~/.config/nvim/init.vim")
    print("Installed init.vim")
    link("/coc-settings.json", "~/.config/nvim/coc-settings.json")
    print("Installed coc-settings")
    link("/pylintrc", "~/.pylintrc")
    print("Installed pylintrc")
    coc_plugins()
    print("Installed coc.nvim plugins")
    link("/ultisnips", "~/.config/coc/ultisnips")
    print("Installed coc.nvim ultisnips")

if should("Install spicetify themes?"):
    install_packages(["spotify", "spicetify-cli"])
    link("/spicetify/Themes", "~/.config/spicetify/Themes")
    link("/spicetify/config.ini", "~/.config/spicetify/config.ini")
    print("Installed spicetify configs")

if should("Install zsh configs?"):
    install_packages(["zsh", "zsh-syntax-highlighting", "zsh-autocomplete", "pkgfile", "starship-git"])
    mkdir("~/.zsh")
    link("/zshrc", "~/.zshrc")
    print("Installed zshrc")
    link("/zsh-plugins", "~/.zsh/plugins")
    print("Installed zsh plugins")
    link("/functions.zsh", "~/.zsh/functions.zsh")
    print("Installed functions.zsh")
    link("/aliases.zsh", "~/.zsh/aliases.zsh")
    print("Installed aliases.zsh")
    link("/starship.toml", "~/.config/starship.toml")
    print("Installed starship.toml")
    link("/atuin.toml", "~/.config/atuin/config.toml")
